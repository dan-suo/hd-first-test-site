import axios from "axios";

const API_URL =
  process.env.VUE_APP_API_URL || "http://localhost:5000/api/astro";

/**
 * üìå –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —É —Å–µ—Ä–≤–µ—Ä–∞
 * @param {Date} date - –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
 * @returns {Promise<Array>} - –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ { planet, degree, gate, line }
 */
export async function getHumanDesignData(date) {
  try {
    const requestData = {
      date: {
        year: date.getUTCFullYear(),
        month: date.getUTCMonth() + 1, // JS-–º–µ—Å—è—Ü—ã —Å 0
        day: date.getUTCDate(),
        hours: date.getUTCHours(),
        minutes: date.getUTCMinutes(),
      },
    };

    console.log("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å:", requestData);
    const response = await axios.post(API_URL, requestData);

    if (!response.data || !Array.isArray(response.data)) {
      console.error("‚ùå –û—à–∏–±–∫–∞: –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –º–∞—Å—Å–∏–≤!", response.data);
      return [];
    }

    console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", response.data);

    return response.data.map(({ planet, degree }) => {
      if (degree === null || isNaN(parseFloat(degree))) {
        console.warn(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${planet}: degree =`, degree);
        return { planet, degree: "N/A", gate: null, line: null };
      }

      return {
        planet,
        degree: parseFloat(degree).toFixed(2), // ‚úÖ –ü—Ä–∏–≤–æ–¥–∏–º –∫ —á–∏—Å–ª—É –∏ –æ–∫—Ä—É–≥–ª—è–µ–º
        ...getGateByDegree(parseFloat(degree)), // ‚úÖ –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞—ë–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      };
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ API:", error);
    return [];
  }
}

/**
 * üìå –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–æ —Ä–æ–∂–¥–µ–Ω–∏—è (–∑–∞ 87 –¥–Ω–µ–π)
 * @param {Date} date - –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
 * @returns {Promise<Array>}
 */
export async function getRedHumanDesignData(date) {
  try {
    const redDate = new Date(date);
    redDate.setDate(redDate.getDate() - 87);
    redDate.setHours(redDate.getHours() - 14);
    redDate.setMinutes(redDate.getMinutes() - 27);

    console.log("üî• getRedHumanDesignData, –¥–∞—Ç–∞:", redDate);
    return await getHumanDesignData(redDate);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ getRedHumanDesignData:", error);
    return [];
  }
}

/**
 * üìå –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≥—Ä–∞–¥—É—Å –≤ –≤–æ—Ä–æ—Ç–∞ –∏ –ª–∏–Ω–∏—é
 */
const gateOrder = [
  41, 19, 13, 49, 30, 55, 37, 63, 22, 36, 25, 17, 21, 51, 42, 3, 27, 24, 2, 23,
  8, 20, 16, 35, 45, 12, 15, 52, 39, 53, 62, 56, 31, 33, 7, 4, 29, 59, 40, 64,
  47, 6, 46, 18, 48, 57, 32, 50, 28, 44, 1, 43, 14, 34, 9, 5, 26, 11, 10, 58,
  38, 54, 61, 60,
];

const DEGREE_SHIFT = 58.2;
const RED_DEGREE_SHIFT = 10;

export function getGateByDegree(degree, isRed = false) {
  if (degree == null || isNaN(degree)) return { gate: null, line: null };

  let adjustedDegree = ((degree + DEGREE_SHIFT) + (isRed ? RED_DEGREE_SHIFT : 0)) % 360;
  let gateIndex = Math.floor(adjustedDegree / 5.625);
  let lineIndex = Math.floor((adjustedDegree % 5.625) / 0.9375) + 1;

  return { gate: gateOrder[gateIndex], line: lineIndex };
}
